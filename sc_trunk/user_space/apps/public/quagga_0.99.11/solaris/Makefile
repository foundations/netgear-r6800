# Makefile.in generated by automake 1.10.1 from Makefile.am.
# solaris/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Solaris packages automake file
# $Id$

# XXX This file uses GNU make extensions.

pkgdatadir = $(datadir)/quagga
pkglibdir = $(libdir)/quagga
pkgincludedir = $(includedir)/quagga
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = mips-unknown-linux-gnu
target_triplet = mips-unknown-linux-gnu
subdir = solaris
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
SOURCES =
DIST_SOURCES =
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/missing --run aclocal-1.10
AMTAR = ${SHELL} /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/missing --run autoconf
AUTOHEADER = ${SHELL} /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/missing --run autoheader
AUTOMAKE = ${SHELL} /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/missing --run automake-1.10
AWK = gawk
BGPD = 
CC = /Platform/DG834V4/DGN2000/Source/tools/mips-linux-uclibc/bin/mips-uclibc-gcc
CCDEPMODE = depmode=none
CFLAGS = -Wall -s -Os
CONFDATE = 20090327
CPP = /Platform/DG834V4/DGN2000/Source/tools/mips-linux-uclibc/bin/mips-uclibc-gcc -E
CPPFLAGS = 
CURSES = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=none
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = gfortran
FFLAGS = -g -O2
GAWK = gawk
GREP = /bin/grep
IF_METHOD = if_netlink.o
IF_PROC = 
INCLUDES = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
IOCTL_METHOD = ioctl.o
IPFORWARD = ipforward_proc.o
ISISD = 
ISIS_METHOD = isis_pfpacket.o
ISIS_TOPOLOGY_DIR = 
ISIS_TOPOLOGY_INCLUDES = 
ISIS_TOPOLOGY_LIB = 
KERNEL_METHOD = 
LDFLAGS = 
LIBCAP = 
LIBM = -lm
LIBOBJS =  ${LIBOBJDIR}memcmp$U.o ${LIBOBJDIR}mktime$U.o ${LIBOBJDIR}lstat$U.o ${LIBOBJDIR}stat$U.o
LIBPAM = 
LIBREADLINE = 
LIBS = -lcrypt 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIB_IPV6 = 
LIB_REGEX = 
LN_S = ln -s
LTLIBOBJS =  ${LIBOBJDIR}memcmp$U.lo ${LIBOBJDIR}mktime$U.lo ${LIBOBJDIR}lstat$U.lo ${LIBOBJDIR}stat$U.lo
MAKEINFO = ${SHELL} /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MULTIPATH_NUM = 1
OBJEXT = o
OSPF6D = 
OSPFAPI = 
OSPFCLIENT = 
OSPFD = 
OTHER_METHOD = 
PACKAGE = quagga
PACKAGE_BUGREPORT = http://bugzilla.quagga.net
PACKAGE_NAME = Quagga
PACKAGE_STRING = Quagga 0.99.11
PACKAGE_TARNAME = quagga
PACKAGE_VERSION = 0.99.11
PATH_SEPARATOR = :
PERL = 
PICFLAGS = -fPIE
PILDFLAGS = -pie
RANLIB = ranlib
RIPD = ripd
RIPNGD = 
RTREAD_METHOD = rtread_netlink.o
RT_METHOD = rt_netlink.o
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
SNMP_INCLUDES = 
SOLARIS = 
STRIP = strip
VERSION = 0.99.11
VTYSH = 
WATCHQUAGGA = watchquagga
ZEBRA = zebra
abs_builddir = /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris
abs_srcdir = /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris
abs_top_builddir = /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11
abs_top_srcdir = /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11
ac_ct_CC = 
ac_ct_CXX = g++
ac_ct_F77 = gfortran
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
enable_group = root
enable_user = root
enable_vty_group = 
exampledir = ${prefix}/etc
exec_prefix = ${prefix}
host = mips-unknown-linux-gnu
host_alias = mips-linux
host_cpu = mips
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgsrcdir = 
pkgsrcrcdir = 
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
quagga_statedir = /var/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = mips-unknown-linux-gnu
target_alias = 
target_cpu = mips
target_os = linux-gnu
target_vendor = unknown
top_builddir = ..
top_srcdir = ..

# the names of the various subpackages, and some convenient 
# derived variables.
pkg_names = daemons dev doc libs smf
pkg_quagga_daemons = zebra bgpd ospfd ospf6d ripd ripngd
pkg_name_rev = 0.99.11-20090327-linux-gnu-mips
pkg_depends := $(pkg_names:%=depend.%)
pkg_packages := $(pkg_names:%=quagga-%-$(pkg_name_rev).pkg)
pkg_pkginfos := $(pkg_names:%=pkginfo.%.full)
pkg_prototypes := $(pkg_names:%=prototype.%)
pkg_manifests := quagga.xml

# pkgmk variable substitutions wont grok ${variable} in prototype
# file, so we cant let autoconf generate the file sadly
# wish automake would just provide a template for this
edit := $(SED) \
	-e 's,@prefix\@,$(prefix),g' \
	-e 's,@exec_prefix,$(exec_prefix),g' \
	-e 's,@bindir\@,$(bindir),g' \
	-e 's,@sbindir\@,$(sbindir),g' \
	-e 's,@libexecdir\@,$(libexecdir),g' \
	-e 's,@datadir\@,$(datadir),g' \
	-e 's,@sysconfdir\@,$(sysconfdir),g' \
	-e 's,@sharedstatedir\@,$(sharedstatedir),g' \
	-e 's,@localstatedir\@,$(localstatedir),g' \
	-e 's,@libdir\@,$(libdir),g' \
	-e 's,@includedir\@,$(includedir),g' \
	-e 's,@infodir\@,$(infodir),g' \
	-e 's,@mandir\@,$(mandir),g' \
	-e 's,@enable_user\@,$(enable_user),g' \
	-e 's,@enable_group\@,$(enable_group),g' \
	-e 's,@enable_vty_group\@,$(enable_vty_group),g' \
	-e 's,@quagga_statedir\@,$(quagga_statedir),g' \
	-e 's,[@]PACKAGE_NAME[@],Quagga,g' \
 	-e 's,[@]PACKAGE_TARNAME[@],quagga,g' \
 	-e 's,[@]PACKAGE_VERSION[@],0.99.11,g' \
 	-e 's,[@]PACKAGE_BUGREPORT[@],http://bugzilla.quagga.net,g' \
  	-e 's,[@]CONFDATE[@],20090327,g' \
 	-e 's,[@]target_cpu[@],$(target_cpu),g' \
 	-e 's,[@]target_host[@],$(target_host),g' \
 	-e 's,[@]target_os[@],$(target_os),g'


# common options for pkgmk
pkg_make_vars := exec_prefix=${prefix} prefix=/usr/local \
	builddir=. srcdir=. \
	top_builddir=.. top_srcdir=.. \
	abs_builddir=/Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris abs_srcdir=/Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris \
	abs_top_builddir=/Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11 abs_top_srcdir=/Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11


# pkgmk: write the package to spool in build dir, to avoid root dependencies
pkg_make = pkgmk -o -d /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris \
	-f $< DESTDIR="$(DESTDIR)/" $(pkg_make_vars)


# pkgtrans: write a pkg file stream, shame we cant pipe directly to it from
# pkgmk..
pkg_trans = pkgtrans -s /Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris "/Platform/DG834V4/DGN2000/Source/apps/quagga-0.99.11/solaris/$@"

# pkginfo.package and prototype.package are all built sources
#BUILT_SOURCES = pkginfo.daemons pkginfo.dev pkginfo.doc pkginfo.libs \
#	prototype.daemons prototype.dev prototype.doc prototype.libs
BUILT_SOURCES = $(pkg_pkginfos) pkginfo.tmpl $(pkg_prototypes) \
	$(pkg_manifests) $(pkg_depends) quagga.init

CLEANFILES := $(BUILT_SOURCES) $(pkg_packages)
EXTRA_DIST := $(pkg_manifests:%=%.in) $(pkg_prototypes:%=%.in) \
	$(pkg_names:%=pkginfo.%.tmpl.in) $(srcdir)/pkginfo.tmpl.in \
	$(pkg_depends:%=%.in) quagga.init.in README.txt

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  solaris/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  solaris/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile
installdirs:
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-libtool \
	distclean distclean-generic distclean-libtool distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am


.PHONY: packages

# pkgmk can only cope with a single pkginfo, cant 'stack' various 
# pkginfo template files and a package specific pkginfo file in the prototype
# Create the package specific template here, and create the full pkginfo
# by cating this and the common pkginfo.tmpl together.
pkginfo.tmpl: $(srcdir)/pkginfo.tmpl.in Makefile
	rm -f $@
	$(edit) $< > $@

pkginfo.%.tmpl: $(srcdir)/pkginfo.%.tmpl.in Makefile
	rm -f $@
	$(edit) $< > $@

pkginfo.%.full: pkginfo.%.tmpl pkginfo.tmpl Makefile
	cat pkginfo.tmpl pkginfo.$*.tmpl > $@

# use 'edit' above to transform prototype.in to pkgmk acceptable prototype
prototype.%: $(srcdir)/prototype.%.in Makefile
	rm -f $@
	$(edit) $< > $@

# use edit to construct the SMF manifest files
%.xml: $(srcdir)/%.xml.in Makefile
	rm -f $@
	$(edit) $< > $@
# use edit to construct the depend files
depend.%: $(srcdir)/depend.%.in Makefile
	rm -f $@
	$(edit) $< > $@

# method file (bit like init script)
quagga.init: $(srcdir)/quagga.init.in Makefile
	rm -f $@
	$(edit) $< > $@

# construct the pkg
quagga-%-$(pkg_name_rev).pkg: prototype.% \
		depend.% quagga.init pkginfo.%.full
	($(pkg_make) && \
	$(pkg_trans) "QUAGGA$*")

%.pkg.gz : %.pkg
	(gzip -c $< > $@)

pkg-root-install:
	(cd $(top_builddir) && \
	 $(MAKE) DESTDIR=$(abs_builddir)/quagga-root install)

packages: $(pkg_packages)

#nodist_pkgdata_DATA = $(pkg_packages)
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
